# Write a program to reverse a string ? 

	public class StringPrograms {

		public static void main(String[] args) {

			String str = "123";
			System.out.println(reverse(str));
		}

		public static String reverse(String in) {
			if (in == null)
				throw new IllegalArgumentException("Null is not valid input");

			StringBuilder out = new StringBuilder();

			char[] chars = in.toCharArray();

			for (int i = chars.length - 1; i >= 0; i--)
				out.append(chars[i]);

			return out.toString();
		}
	}

# Java Program to check if a vowel is present in the string?

	public class StringContainsVowels {

		public static void main(String[] args) {

			System.out.println(stringContainsVowels("Hello")); // true
			System.out.println(stringContainsVowels("TV")); // false

		}

		public static boolean stringContainsVowels(String input) {

			return input.toLowerCase().matches(".*[aeiou].*");

		}

	}

Java program to check if the given number is Prime?


	public class PrimeNumberCheck {

		public static void main(String[] args) {

			System.out.println(isPrime(19)); // true
			System.out.println(isPrime(49)); // false
		}

		public static boolean isPrime(int n) {
			if (n == 0 || n == 1) {
				return false;
			}
			if (n == 2) {
				return true;
			}
			for (int i = 2; i <= n / 2; i++) {
				if (n % i == 0) {
					return false;
				}
			}

			return true;
		}
	}
	
Fibonacci Series

	public static void printFibonacciSeries(int count) {
		int a = 0;
		int b = 1;
		int c = 1;
		for (int i = 1; i <= count; i++) {
			System.out.print(a + ", ");
			a = b;
			b = c;
			c = a + b;
		}
	}



	public class FibonacciNumbers {
		public static int fibonacci(int n) {
			if (n <= 1)
				return n;
			return fibonacci(n - 1) + fibonacci(n - 2);
		}

		public static void main(String args[]) {
			int n = 10;
			System.out.println(fibonacci(n));
		}
	}



	public static boolean onlyOddNumbers(List<Integer> list) {
		for (int i : list) {
			if (i % 2 == 0)
				return false;
		}
		return true;
	}


	public static boolean onlyOddNumbers(List<Integer> list) {
		for (int i : list) {
			if (i % 2 == 0)
				return false;
		}
		return true;
	}




If the list is huge, we can use parallel streams for faster processing.

	public static boolean onlyOddNumbers(List<Integer> list) {
		return list.parallelStream().anyMatch(x -> x % 2 != 0); // return as soon as any elements match the condition
	}


Palindrome 

	boolean checkPalindromeString(String input) {
		boolean result = true;
		int length = input.length();
		for(int i=0; i < length/2; i++) {
			if(input.charAt(i) != input.charAt(length-1-i)) {
				result = false;
				break;
			}
		}
		return result;
	}
